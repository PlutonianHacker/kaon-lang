//! The `Kaon` VM and runtime.
//!
//! The [Vm] (_virtual machine_) is stack-based; values are pushed and
//! popped from a stack. It runs the bytecode generated by the compiler.

pub mod stack;
pub mod stdio;
pub mod trace;
pub mod vm;
pub mod module;
mod run;

pub use stack::{Frame, Stack};
pub use stdio::{KaonStderr, KaonStdin, KaonStdout};
pub use trace::Trace;
pub use vm::Vm;

use crate::common::KaonFile;

pub struct Config {
    pub stdout: Box<dyn KaonFile>,
    pub stdin: Box<dyn KaonFile>,
    pub stderr: Box<dyn KaonFile>,
}

impl Default for Config {
    fn default() -> Self {
        Config {
            stdout: Box::new(KaonStdout::default()),
            stdin: Box::new(KaonStdin::default()),
            stderr: Box::new(KaonStderr::default()),
        }
    }
}

/*pub struct Vm {
    config: Config,
    stack: Stack,
    call_stack: C
}*/
